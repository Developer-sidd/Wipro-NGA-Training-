function fibonacci recurssion

1. start
2. take variable num till which series will be shown
3. make function fibo and pass num in it with number recieving ans 
4. print(number+" ")
5. end

function fibo(num)
if(num ==1)
	return 0
   else if(num == 2)
	return 1
   else
	fibo(num-1)+fibo(num-2)
   if end
stop
time complexity = O(2^n)

function fibonacci_iterative(n)
    array fib[n]
    if n <= 1
        return n
    else
        fib[0] = 0
	fib[1] = 1
        for i from 2 to n
            fib[i] = fib[i-1] + fib[i-2]
        return fib[n]
stop
time complexity = o(n)

The recursive approach has exponential time complexity O(2^n) but linear space complexity O(n), while the iterative approach has linear time complexity O(n) and linear space complexity O(n). The recursive approach is less efficient due to the exponential growth of recursive calls, especially for large values of n, while the iterative approach is more efficient and suitable for practical use, particularly for large inputs.